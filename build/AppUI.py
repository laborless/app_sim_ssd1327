# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar, IntVar, ttk
from tkinter import Checkbutton
from PIL import Image, ImageTk, ImageDraw

APP_WIDTH = 800
APP_HEIGHT = 600

DISPLAY_X = 210
DISPLAY_Y = 68

DISPLAY_WIDTH = 580
DISPLAY_HEIGHT = 420

DISLAY_LINE_WIDTH = 1
DISPLAY_RES_X = 30
DISPLAY_RES_Y = 20

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets/frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class AppUI():
	def __init__(self):
		self.disp_resolution = (DISPLAY_RES_X, DISPLAY_RES_Y)
		self.disp_pixel = (1, 1)
		self.disp_width = self.disp_pixel[0] * self.disp_resolution[0] + DISLAY_LINE_WIDTH * (self.disp_resolution[0] + 1)
		self.disp_height = self.disp_pixel[1] * self.disp_resolution[1] + DISLAY_LINE_WIDTH * (self.disp_resolution[1] + 1)
		self.disp_offset = (0, 0)
		self.disp_limit = ((DISPLAY_WIDTH-DISLAY_LINE_WIDTH)//(1+DISLAY_LINE_WIDTH), (DISPLAY_HEIGHT-DISLAY_LINE_WIDTH)//(1+DISLAY_LINE_WIDTH))
		self.brush_color = "#000000"
		

		self.image = Image.new("RGB", self.disp_resolution, "white")
		self.image_draw = ImageDraw.Draw(self.image)

		self._root = Tk()
		self._root.geometry("800x600")
		self._root.configure(bg = "#FFFFFF")
		self.canvas = Canvas(
			self._root,
			bg = "#FFFFFF",
			height = APP_HEIGHT,
			width = APP_WIDTH,
			bd = 0,
			highlightthickness = 0,
			relief = "ridge"
		)

		self.canvas.place(x = 0, y = 0)
		self.canvas.create_rectangle(
			0.0,
			0.0,
			200.0,
			600.0,
			fill="#1278EC",
			outline="")

		self.canvas.create_rectangle(
			200.0,
			0.0,
			800.0,
			60.0,
			fill="#D8EAFF",
			outline="")

		self.entry_image_1 = PhotoImage(
    	file=relative_to_assets("entry_1.png"))
		self._entry_bg_1 = self.canvas.create_image(
    	60.0,
    	134.0,
    	image=self.entry_image_1
		)
		self.entry_res_x_var = IntVar()
		self.entry_res_x = Entry(
			textvariable=self.entry_res_x_var,
			bd=0,
			bg="#FFFFFF",
			fg="#000716",
			highlightthickness=0
		)
		self.entry_res_x.place(
			x=28.0,
			y=124.0,
			width=64.0,
			height=18.0
		)
		self.entry_res_x_var.set(self.disp_resolution[0])

		self.entry_image_2 = PhotoImage(
			file=relative_to_assets("entry_2.png"))
		self.entry_bg_2 = self.canvas.create_image(
			140.0,
			134.0,
			image=self.entry_image_2
		)

		self.canvas.create_text(
			98.0,
			124.0,
			anchor="nw",
			text="/",
			fill="#FFFFFF",
			font=("Inter", 12 * -1)
		)


		self.entry_res_y_var = IntVar()
		self.entry_res_y = Entry(
			textvariable=self.entry_res_y_var,
			bd=0,
			bg="#FFFFFF",
			fg="#000716",
			highlightthickness=0
		)
		self.entry_res_y.place(
			x=108.0,
			y=124.0,
			width=64.0,
			height=18.0
		)
		self.entry_res_y_var.set(self.disp_resolution[1])

		# color Space
		self.combo_colorspace = ttk.Combobox()
		self.combo_colorspace.place(
			x=25.0,
			y=164.0,
			width=150.0,
			height=20.0
		)

		# Color Depth
		self.combo_colordepth = ttk.Combobox()
		self.combo_colordepth.place(
			x=25.0,
			y=204.0,
			width=61.0,
			height=20.0
		)

		# nibble remap
		self.canvas.create_rectangle(
    	88.0,
    	204.0,
    	175.0,
    	224.0,
    	fill="#FFFFFF",
    	outline="")
		self.canvas.create_text(
    	91.0,
    	206.0,
    	anchor="nw",
    	text="Nb Remap",
    	fill="#000000",
    	font=("Inter", 12 * -1)
		)
		self.check_nb_remap_var = IntVar()
		self.check_nb_remap = Checkbutton(
			bg="white", variable=self.check_nb_remap_var)
		self.check_nb_remap.place(
			x=153.0,
			y=204.0,
			width=20.0,
			height=20.0,
		)

		self.button_image_1 = PhotoImage(
			file=relative_to_assets("button_1.png"))
		self.button_new = Button(
			image=self.button_image_1,
			borderwidth=0,
			highlightthickness=0,
			# command=lambda: print("button_1 clicked"),
			relief="flat",
			fg="#1278EC"
		)
		self.button_new.place(
			x=25.0,
			y=60.0,
			width=150.0,
			height=34.0
		)

		self.button_image_2 = PhotoImage(
			file=relative_to_assets("button_2.png"))
		self.button_import = Button(
			image=self.button_image_2,
			borderwidth=0,
			highlightthickness=0,
			# command=lambda: print("button_2 clicked"),
			relief="flat",
			fg="#1278EC"
		)
		self.button_import.place(
			x=25.0,
			y=246.0,
			width=150.0,
			height=34.0
		)

		self.button_image_3 = PhotoImage(
				file=relative_to_assets("button_3.png"))
		self.button_export = Button(
			image=self.button_image_3,
			borderwidth=0,
			highlightthickness=0,
			# command=lambda: print("button_3 clicked"),
			relief="flat",
			fg="#1278EC"
		)
		self.button_export.place(
			x=25.0,
			y=296.0,
			width=150.0,
			height=34.0
		)

		self.button_image_4 = PhotoImage(
				file=relative_to_assets("button_4.png"))
		self.button_connect = Button(
    	image=self.button_image_4,
    	borderwidth=0,
    	highlightthickness=0,
    	# command=lambda: print("button_4 clicked"),
    	relief="flat",
			fg="#1278EC"
		)
		self.button_connect.place(
    	x=25.0,
    	y=390.0,
    	width=150.0,
    	height=34.0
		)

		self.image_image_1 = PhotoImage(
	    file=relative_to_assets("image_1.png"))
		self.image_1 = self.canvas.create_image(
    	100.0,
    	27.0,
    	image=self.image_image_1
		)

		self.canvas.create_text(
    	25.0,
    	109.0,
    	anchor="nw",
    	text="Resolution X / Y :",
    	fill="#FFFFFF",
    	font=("Inter", 12 * -1)
		)

		self.canvas.create_text(
    	25.0,
    	149.0,
    	anchor="nw",
    	text="Color Space :",
    	fill="#FFFFFF",
    	font=("Inter", 12 * -1)
		)

		entry_image_3 = PhotoImage(
    	file=relative_to_assets("entry_3.png"))
		self.entry_bg_3 = self.canvas.create_image(
    	270.0,
    	35.0,
    	image=entry_image_3
		)
		
		self.entry_coor_var = StringVar()
		self.entry_coor = Entry(
		textvariable=self.entry_coor_var,
    	bd=0,
    	bg="#FFFFFF",
    	fg="#000716",
    	highlightthickness=0
		)
		
		self.entry_coor.place(
	    x=213.0,
    	y=25.0,
    	width=114.0,
    	height=18.0
		)
		

		self.canvas.create_text(
    	210.0,
    	10.0,
    	anchor="nw",
    	text="Pixel Coordinate :",
    	fill="#000000",
    	font=("Inter", 12 * -1)
		)

		entry_image_4 = PhotoImage(
    	file=relative_to_assets("entry_4.png"))
		self.entry_bg_4 = self.canvas.create_image(
			400.0,
			35.0,
    	image=entry_image_4
		)

		self.entry_color_var = StringVar()
		self.entry_color = Entry(
			textvariable=self.entry_color_var,
	    bd=0,
    	bg="#FFFFFF",
    	fg="#000716",
    	highlightthickness=0
		)
		self.entry_color.place(
    	x=343.0,
    	y=25.0,
    	width=114.0,
    	height=18.0
		)


		self.canvas.create_text(
	    340.0,
    	10.0,
    	anchor="nw",
    	text="Pixel Color :",
    	fill="#000000",
    	font=("Inter", 12 * -1)
		)

		self.canvas.create_rectangle(
	    470.0,
    	25.0,
    	590.0,
    	45.0,
    	fill="#FFFFFF",
    	outline="")

		self.canvas.create_text(
    	470.0,
    	10.0,
    	anchor="nw",
    	text="Control Mode :",
    	fill="#000000",
    	font=("Inter", 12 * -1)
		)

		# Brush
		self.entry_brush_var = StringVar()
		self.entry_brush = Entry(
			textvariable=self.entry_brush_var,
	    bd=0,
    	bg="#FFFFFF",
    	fg="#000716",
    	highlightthickness=0
		)
		self.entry_brush.place(
    	x=603.0,
    	y=25.0,
    	width=114.0,
    	height=18.0
		)

		self.canvas.create_text(
    	600.0,
    	10.0,
    	anchor="nw",
    	text="Brush :",
    	fill="#000000",
    	font=("Inter", 12 * -1)
		)

		self.canvas.create_text(
    	25.0,
    	189.0,
    	anchor="nw",
    	text="Color Depth :",
    	fill="#FFFFFF",
    	font=("Inter", 12 * -1)
		)

		# COM PORT
		self.combo_ser_port = ttk.Combobox()
		self.combo_ser_port.place(
			x=25.0,
			y=449.0,
			width=84.0,
			height=20.0
		)

		# COM Baudrate
		self.combo_ser_baudrate = ttk.Combobox()
		self.combo_ser_baudrate.place(
			x=111.0,
			y=449.0,
			width=64.0,
			height=20.0
		)

		self.canvas.create_text(
	    25.0,
    	434.0,
    	anchor="nw",
    	text="Serial Port :",
    	fill="#FFFFFF",
    	font=("Inter", 12 * -1)
		)

		# self.image_image_2 = PhotoImage(
    # 	file=relative_to_assets("image_2.png"))
		# self.image_2 = self.canvas.create_image(
    # 	500.0,
    # 	278.0,
    # 	image=self.image_image_2
		# )
		self.render_display()

		# entry_image_5 = PhotoImage(
    # 	file=relative_to_assets("entry_5.png"))
		# self.entry_bg_5 = self.canvas.create_image(
    # 	500.0,
    # 	541.0,
    # 	image=entry_image_5
		# )
		self.entry_output = Text(
    	# bd=0,
    	# bg="#09E1FF",
    	# fg="#000716",
    	# highlightthickness=0
		)
		self.entry_output.place(
	    x=210.0,
    	y=496.0,
    	width=580.0,
    	height=88.0
		)

		# todo:
		# this self.treeview should replace entry_output
		self.treeview = ttk.Treeview(self._root)

	def new_image(self):
		self.image.close()
		self.image = Image.new("RGB", self.disp_resolution, "white")
		self.image_draw = ImageDraw.Draw(self.image)

	def render_display(self):
		pix_width = 1
		while True:
			if (self.disp_resolution[0] * (pix_width + 1)) + ((self.disp_resolution[0]+1) * DISLAY_LINE_WIDTH) > DISPLAY_WIDTH:
				break
			pix_width += 1

		pix_height = 1
		while True:
			if (self.disp_resolution[1] * (pix_height + 1)) + ((self.disp_resolution[1]+1) * DISLAY_LINE_WIDTH) > DISPLAY_HEIGHT:
				break
			pix_height += 1			

		self.disp_pixel = (pix_width, pix_height)
		self.disp_width = (self.disp_pixel[0] * self.disp_resolution[0]) + (DISLAY_LINE_WIDTH * (self.disp_resolution[0] + 1))
		self.disp_height = (self.disp_pixel[1] * self.disp_resolution[1]) + (DISLAY_LINE_WIDTH * (self.disp_resolution[1] + 1))
		
		self.disp_offset = ( (DISPLAY_WIDTH-self.disp_width)//2, (DISPLAY_HEIGHT-self.disp_height)//2 )

		self.canvas.create_rectangle(
    	DISPLAY_X,
    	DISPLAY_Y,
    	DISPLAY_X+DISPLAY_WIDTH,
    	DISPLAY_Y+DISPLAY_HEIGHT,
    	fill="#FFFFFF",
    	outline="")
		
		for line in range(0, self.disp_width, self.disp_pixel[0]+DISLAY_LINE_WIDTH):
			self.canvas.create_line([(self.disp_offset[0]+DISPLAY_X+line, self.disp_offset[1]+DISPLAY_Y), 
							(self.disp_offset[0]+DISPLAY_X+line, self.disp_offset[1]+DISPLAY_Y+self.disp_height)],fill='grey', tags='grid_line_w')
		for line in range(0, self.disp_height, self.disp_pixel[1]+DISLAY_LINE_WIDTH):
			self.canvas.create_line([(self.disp_offset[0]+DISPLAY_X, self.disp_offset[1]+DISPLAY_Y+line), 
							(self.disp_offset[0]+DISPLAY_X+self.disp_width, self.disp_offset[1]+DISPLAY_Y+line)],fill='grey', tags='grid_line_h')
    
	def get_display_offset(self):
		return (DISPLAY_X, DISPLAY_Y)
	
	def get_display_line_width(self):
		return DISLAY_LINE_WIDTH
	
	def get_brush_color(self):
		return self.brush_color
	
	def set_brush_color(self, color):
		self.brush_color = color
	
	def generate_treeview(self, res_x, res_y):
		try:

			for i in self.treeview.get_children():
				self.treeview.delete(i)

			# treeview = ttk.Treeview(self._root, res_y)
			list_idx = [str(i) for i in range(res_x)]
			self.treeview["columns"] = list_idx
			for i in range(res_x):
				self.treeview.column("#"+str(i), width=6)

			for i in range(res_x):
				self.treeview.insert("", 'end', text="text", values=[i for j in range(res_y)])

			self.treeview.place(
			x=210.0,
			y=496.0,
			width=580.0,
			height=88.0)

		except Exception as e:
			pass

	def run(self):
		self._root.resizable(False, False)
		self._root.mainloop()

if __name__ == "__main__":
  app = AppUI()
  app.run()